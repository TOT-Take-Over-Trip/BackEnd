<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.trip.post.model.mapper.PostMapper">

 <!-- <resultMap type="postDto" id="post">
    <result column="post_id" property="postId" />
    <result column="member_id" property="memberId" />
    <result column="member_name" property="memberName" />
    <result column="title" property="title" />
    <result column="content" property="content" />
    <result column="thumbnail" property="thumbnail" />
    <result column="post_like_count" property="postLikeCount" />
    <result column="created_date" property="createdDate" />
    <result column="updated_date" property="updatedDate" />
    <result column="status" property="status" />
  </resultMap>-->

  <resultMap type="postResponseDto" id="postResponse">
    <result column="post_id" property="postId" />
    <result column="member_id" property="memberId" />
    <result column="member_name" property="memberName" />
    <result column="title" property="title" />
    <result column="content" property="content" />
    <result column="thumbnail" property="thumbnail" />
    <result column="post_like_count" property="postLikeCount" />
    <result column="is_like" property="isLike" />
    <result column="created_date" property="createdDate" />
    <result column="updated_date" property="updatedDate" />
    <result column="status" property="status" />
  </resultMap>
  
  <resultMap type="PostCommentDto" id="postComment">
    <result column="post_comment_id" property="postCommentId" />
    <result column="post_id" property="postId" />
    <result column="member_id" property="memberId" />
    <result column="member_name" property="memberName" />
    <result column="content" property="content" />
    <result column="created_date" property="createdDate" />
    <result column="updated_date" property="updatedDate" />
    <result column="status" property="status" />
  </resultMap>

  <!--전체 게시글 조회-->
  <select id="selectAllPosts" parameterType="int" resultMap="postResponse">
    SELECT
      DISTINCT p.*,
      COALESCE(pl.is_like, 0) as is_like
    FROM
      post p
        LEFT JOIN (SELECT post_id, is_like FROM post_like WHERE member_id = #{memberId}) pl ON p.post_id = pl.post_id
    where p.status= 'active';
  </select>

  <!--특정 게시글 조회-->
  <select id="selectPostById" parameterType="map" resultMap="postResponse">
    SELECT
      DISTINCT p.*,
      COALESCE(pl.is_like, 0) as is_like
    FROM
      post p
        LEFT JOIN (SELECT post_id, is_like FROM post_like WHERE member_id = #{memberId}) pl ON p.post_id = pl.post_id
    WHERE
      p.post_id = #{postId}
  </select>

  <!--특정 게시글 댓글 조회-->
  <select id="selectPostCommentsById" parameterType="int" resultMap="postComment">
    SELECT
      post_comment_id, post_id, member_id, member_name, content, created_date, updated_date, status
    FROM
      post_comment
    WHERE
      post_id = #{postId}
  </select>

  <!--내가 작성한 게시글 조회-->
  <select id="selectPostsByMemberId" parameterType="int" resultMap="postResponse">
    SELECT
      DISTINCT p.*,
      COALESCE(pl.is_like, 0) as is_like
    FROM
      post p
        LEFT JOIN (SELECT post_id, is_like FROM post_like WHERE member_id = #{memberId}) pl ON p.post_id = pl.post_id
    WHERE status = 'active' and member_id = #{memberId}
  </select>

  <!--내가 댓글단 게시글 조회-->
  <select id="selectPostsByMemberComments" parameterType="int" resultMap="postResponse">
    SELECT DISTINCT p.*, COALESCE(pl.is_like, 0) as is_like
    FROM post p
           LEFT JOIN (SELECT post_id, is_like FROM post_like WHERE member_id = #{memberId}) pl ON p.post_id = pl.post_id
           INNER JOIN post_comment pc ON p.post_id = pc.post_id
    WHERE pc.member_id = #{memberId}
  </select>

  <!--내가 좋아요 누른 게시글 조회-->
  <select id="selectPostsByMemberLike" parameterType="int" resultMap="postResponse">
    SELECT DISTINCT p.*, pl.is_like
    FROM post p
           INNER JOIN post_like pl ON p.post_id = pl.post_id
    WHERE pl.member_id = #{memberId} and pl.is_like = true;
  </select>

  <!--게시글 등록-->
  <insert id="insertPost" parameterType="PostDto">
    INSERT INTO Post(member_id, member_name, title, content, thumbnail)
    VALUES(#{memberId}, #{memberName}, #{title}, #{content}, #{thumbnail})
  </insert>

  <!--게시글 댓글 등록-->
  <insert id="insertPostComment" parameterType="PostCommentDto" useGeneratedKeys="true" keyProperty="postCommentId">
    INSERT into post_comment(post_id, member_id, content, member_name)
    VALUES (#{postId}, #{memberId}, #{content}, #{memberName})
    <selectKey keyProperty="postCommentId" resultType="int" order="AFTER">
      SELECT LAST_INSERT_ID()
    </selectKey>
  </insert>

  <!--게시글 댓글 단일 조회(댓글 실시간 반영을 위해 사용)-->
  <select id="selectPostCommentByPostCommentId" parameterType="int" resultMap="postComment">
    SELECT *
    FROM post_comment
    WHERE post_comment_id = #{postCommentId}
  </select>

  <!--좋아요 누르기 -없으면 insert 있으면 상태변화-->
  <insert id="insertOrUpdateLike" parameterType="map">
    INSERT INTO post_like (post_id, member_id, is_like)
    VALUES (#{postId}, #{memberId}, 1)
    ON DUPLICATE KEY UPDATE is_like = NOT is_like;
  </insert>



  <update id="updatePost" parameterType="PostDto">
    UPDATE
      POST
    SET
      title = #{title}
      ,   content = #{content}
      ,       created_date = #{createdDate}
      ,       updated_date = #{updatedDate}
      ,       status = #{status}
    WHERE
      post_id = #{postId}
  </update>

  <update id="deletePostById" parameterType="int">
    UPDATE
      POST
    SET
      status = #{status}
    WHERE
      post_id = #{postId}
  </update>

</mapper>